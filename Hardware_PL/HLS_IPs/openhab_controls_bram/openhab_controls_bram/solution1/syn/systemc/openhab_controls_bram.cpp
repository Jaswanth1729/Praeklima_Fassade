// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "openhab_controls_bram.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic openhab_controls_bram::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic openhab_controls_bram::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> openhab_controls_bram::ap_ST_fsm_state1 = "1";
const sc_lv<3> openhab_controls_bram::ap_ST_fsm_state2 = "10";
const sc_lv<3> openhab_controls_bram::ap_ST_fsm_state3 = "100";
const sc_lv<32> openhab_controls_bram::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> openhab_controls_bram::ap_const_lv32_1 = "1";
const sc_lv<1> openhab_controls_bram::ap_const_lv1_0 = "0";
const sc_lv<4> openhab_controls_bram::ap_const_lv4_0 = "0000";
const sc_lv<32> openhab_controls_bram::ap_const_lv32_2 = "10";
const sc_lv<4> openhab_controls_bram::ap_const_lv4_F = "1111";
const sc_lv<4> openhab_controls_bram::ap_const_lv4_A = "1010";
const sc_lv<4> openhab_controls_bram::ap_const_lv4_1 = "1";
const sc_lv<1> openhab_controls_bram::ap_const_lv1_1 = "1";
const bool openhab_controls_bram::ap_const_boolean_1 = true;

openhab_controls_bram::openhab_controls_bram(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln16_fu_82_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln16_fu_82_p2 );

    SC_METHOD(thread_i_fu_88_p2);
    sensitive << ( i_0_reg_71 );

    SC_METHOD(thread_icmp_ln1495_fu_100_p2);
    sensitive << ( inputData_V_Dout_A );
    sensitive << ( thresholds_V_Dout_A );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln16_fu_82_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_71 );

    SC_METHOD(thread_inputData_V_Addr_A);
    sensitive << ( inputData_V_Addr_A_orig );

    SC_METHOD(thread_inputData_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln18_1_fu_94_p1 );

    SC_METHOD(thread_inputData_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_inputData_V_Din_A);

    SC_METHOD(thread_inputData_V_EN_A);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_inputData_V_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_inputData_V_WEN_A);

    SC_METHOD(thread_outData_Addr_A);
    sensitive << ( outData_Addr_A_orig );

    SC_METHOD(thread_outData_Addr_A_orig);
    sensitive << ( zext_ln18_1_reg_119 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_outData_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_outData_Din_A);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln1495_fu_100_p2 );

    SC_METHOD(thread_outData_EN_A);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_outData_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_outData_WEN_A);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_thresholds_V_Addr_A);
    sensitive << ( thresholds_V_Addr_A_orig );

    SC_METHOD(thread_thresholds_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln18_1_fu_94_p1 );

    SC_METHOD(thread_thresholds_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_thresholds_V_Din_A);

    SC_METHOD(thread_thresholds_V_EN_A);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_thresholds_V_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_thresholds_V_WEN_A);

    SC_METHOD(thread_zext_ln18_1_fu_94_p1);
    sensitive << ( i_0_reg_71 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln16_fu_82_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "openhab_controls_bram_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inputData_V_Addr_A, "(port)inputData_V_Addr_A");
    sc_trace(mVcdFile, inputData_V_EN_A, "(port)inputData_V_EN_A");
    sc_trace(mVcdFile, inputData_V_WEN_A, "(port)inputData_V_WEN_A");
    sc_trace(mVcdFile, inputData_V_Din_A, "(port)inputData_V_Din_A");
    sc_trace(mVcdFile, inputData_V_Dout_A, "(port)inputData_V_Dout_A");
    sc_trace(mVcdFile, inputData_V_Clk_A, "(port)inputData_V_Clk_A");
    sc_trace(mVcdFile, inputData_V_Rst_A, "(port)inputData_V_Rst_A");
    sc_trace(mVcdFile, thresholds_V_Addr_A, "(port)thresholds_V_Addr_A");
    sc_trace(mVcdFile, thresholds_V_EN_A, "(port)thresholds_V_EN_A");
    sc_trace(mVcdFile, thresholds_V_WEN_A, "(port)thresholds_V_WEN_A");
    sc_trace(mVcdFile, thresholds_V_Din_A, "(port)thresholds_V_Din_A");
    sc_trace(mVcdFile, thresholds_V_Dout_A, "(port)thresholds_V_Dout_A");
    sc_trace(mVcdFile, thresholds_V_Clk_A, "(port)thresholds_V_Clk_A");
    sc_trace(mVcdFile, thresholds_V_Rst_A, "(port)thresholds_V_Rst_A");
    sc_trace(mVcdFile, outData_Addr_A, "(port)outData_Addr_A");
    sc_trace(mVcdFile, outData_EN_A, "(port)outData_EN_A");
    sc_trace(mVcdFile, outData_WEN_A, "(port)outData_WEN_A");
    sc_trace(mVcdFile, outData_Din_A, "(port)outData_Din_A");
    sc_trace(mVcdFile, outData_Dout_A, "(port)outData_Dout_A");
    sc_trace(mVcdFile, outData_Clk_A, "(port)outData_Clk_A");
    sc_trace(mVcdFile, outData_Rst_A, "(port)outData_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_88_p2, "i_fu_88_p2");
    sc_trace(mVcdFile, i_reg_114, "i_reg_114");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln18_1_fu_94_p1, "zext_ln18_1_fu_94_p1");
    sc_trace(mVcdFile, zext_ln18_1_reg_119, "zext_ln18_1_reg_119");
    sc_trace(mVcdFile, icmp_ln16_fu_82_p2, "icmp_ln16_fu_82_p2");
    sc_trace(mVcdFile, i_0_reg_71, "i_0_reg_71");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, inputData_V_Addr_A_orig, "inputData_V_Addr_A_orig");
    sc_trace(mVcdFile, thresholds_V_Addr_A_orig, "thresholds_V_Addr_A_orig");
    sc_trace(mVcdFile, outData_Addr_A_orig, "outData_Addr_A_orig");
    sc_trace(mVcdFile, icmp_ln1495_fu_100_p2, "icmp_ln1495_fu_100_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("openhab_controls_bram.hdltvin.dat");
    mHdltvoutHandle.open("openhab_controls_bram.hdltvout.dat");
}

openhab_controls_bram::~openhab_controls_bram() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void openhab_controls_bram::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_71 = i_reg_114.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_71 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_114 = i_fu_88_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_82_p2.read(), ap_const_lv1_0))) {
        zext_ln18_1_reg_119 = zext_ln18_1_fu_94_p1.read();
    }
}

void openhab_controls_bram::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void openhab_controls_bram::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void openhab_controls_bram::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void openhab_controls_bram::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_82_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void openhab_controls_bram::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void openhab_controls_bram::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_82_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void openhab_controls_bram::thread_i_fu_88_p2() {
    i_fu_88_p2 = (!i_0_reg_71.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_71.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void openhab_controls_bram::thread_icmp_ln1495_fu_100_p2() {
    icmp_ln1495_fu_100_p2 = (!inputData_V_Dout_A.read().is_01() || !thresholds_V_Dout_A.read().is_01())? sc_lv<1>(): (sc_bigint<32>(inputData_V_Dout_A.read()) < sc_bigint<32>(thresholds_V_Dout_A.read()));
}

void openhab_controls_bram::thread_icmp_ln16_fu_82_p2() {
    icmp_ln16_fu_82_p2 = (!i_0_reg_71.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_71.read() == ap_const_lv4_A);
}

void openhab_controls_bram::thread_inputData_V_Addr_A() {
    inputData_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): inputData_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void openhab_controls_bram::thread_inputData_V_Addr_A_orig() {
    inputData_V_Addr_A_orig =  (sc_lv<32>) (zext_ln18_1_fu_94_p1.read());
}

void openhab_controls_bram::thread_inputData_V_Clk_A() {
    inputData_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void openhab_controls_bram::thread_inputData_V_Din_A() {
    inputData_V_Din_A = ap_const_lv32_0;
}

void openhab_controls_bram::thread_inputData_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        inputData_V_EN_A = ap_const_logic_1;
    } else {
        inputData_V_EN_A = ap_const_logic_0;
    }
}

void openhab_controls_bram::thread_inputData_V_Rst_A() {
    inputData_V_Rst_A = ap_rst.read();
}

void openhab_controls_bram::thread_inputData_V_WEN_A() {
    inputData_V_WEN_A = ap_const_lv4_0;
}

void openhab_controls_bram::thread_outData_Addr_A() {
    outData_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): outData_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void openhab_controls_bram::thread_outData_Addr_A_orig() {
    outData_Addr_A_orig =  (sc_lv<32>) (zext_ln18_1_reg_119.read());
}

void openhab_controls_bram::thread_outData_Clk_A() {
    outData_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void openhab_controls_bram::thread_outData_Din_A() {
    outData_Din_A = esl_zext<32,1>(icmp_ln1495_fu_100_p2.read());
}

void openhab_controls_bram::thread_outData_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        outData_EN_A = ap_const_logic_1;
    } else {
        outData_EN_A = ap_const_logic_0;
    }
}

void openhab_controls_bram::thread_outData_Rst_A() {
    outData_Rst_A = ap_rst.read();
}

void openhab_controls_bram::thread_outData_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        outData_WEN_A = ap_const_lv4_F;
    } else {
        outData_WEN_A = ap_const_lv4_0;
    }
}

void openhab_controls_bram::thread_thresholds_V_Addr_A() {
    thresholds_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): thresholds_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void openhab_controls_bram::thread_thresholds_V_Addr_A_orig() {
    thresholds_V_Addr_A_orig =  (sc_lv<32>) (zext_ln18_1_fu_94_p1.read());
}

void openhab_controls_bram::thread_thresholds_V_Clk_A() {
    thresholds_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void openhab_controls_bram::thread_thresholds_V_Din_A() {
    thresholds_V_Din_A = ap_const_lv32_0;
}

void openhab_controls_bram::thread_thresholds_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        thresholds_V_EN_A = ap_const_logic_1;
    } else {
        thresholds_V_EN_A = ap_const_logic_0;
    }
}

void openhab_controls_bram::thread_thresholds_V_Rst_A() {
    thresholds_V_Rst_A = ap_rst.read();
}

void openhab_controls_bram::thread_thresholds_V_WEN_A() {
    thresholds_V_WEN_A = ap_const_lv4_0;
}

void openhab_controls_bram::thread_zext_ln18_1_fu_94_p1() {
    zext_ln18_1_fu_94_p1 = esl_zext<64,4>(i_0_reg_71.read());
}

void openhab_controls_bram::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_82_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void openhab_controls_bram::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_V_Addr_A\" :  \"" << inputData_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_V_EN_A\" :  \"" << inputData_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_V_WEN_A\" :  \"" << inputData_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_V_Din_A\" :  \"" << inputData_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputData_V_Dout_A\" :  \"" << inputData_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_V_Clk_A\" :  \"" << inputData_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_V_Rst_A\" :  \"" << inputData_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"thresholds_V_Addr_A\" :  \"" << thresholds_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"thresholds_V_EN_A\" :  \"" << thresholds_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"thresholds_V_WEN_A\" :  \"" << thresholds_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"thresholds_V_Din_A\" :  \"" << thresholds_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"thresholds_V_Dout_A\" :  \"" << thresholds_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"thresholds_V_Clk_A\" :  \"" << thresholds_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"thresholds_V_Rst_A\" :  \"" << thresholds_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_Addr_A\" :  \"" << outData_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_EN_A\" :  \"" << outData_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_WEN_A\" :  \"" << outData_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_Din_A\" :  \"" << outData_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outData_Dout_A\" :  \"" << outData_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_Clk_A\" :  \"" << outData_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outData_Rst_A\" :  \"" << outData_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

