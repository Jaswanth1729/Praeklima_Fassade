// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "vector_multiplier.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic vector_multiplier::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic vector_multiplier::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> vector_multiplier::ap_ST_fsm_state1 = "1";
const sc_lv<3> vector_multiplier::ap_ST_fsm_state2 = "10";
const sc_lv<3> vector_multiplier::ap_ST_fsm_state3 = "100";
const sc_lv<32> vector_multiplier::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> vector_multiplier::ap_const_lv32_1 = "1";
const sc_lv<32> vector_multiplier::ap_const_lv32_2 = "10";
const int vector_multiplier::C_S_AXI_DATA_WIDTH = "100000";
const bool vector_multiplier::ap_const_boolean_1 = true;

vector_multiplier::vector_multiplier(sc_module_name name) : sc_module(name), mVcdFile(0) {
    vector_multiplier_AXILiteS_s_axi_U = new vector_multiplier_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("vector_multiplier_AXILiteS_s_axi_U");
    vector_multiplier_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    vector_multiplier_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    vector_multiplier_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    vector_multiplier_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    vector_multiplier_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    vector_multiplier_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    vector_multiplier_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    vector_multiplier_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    vector_multiplier_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    vector_multiplier_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    vector_multiplier_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    vector_multiplier_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    vector_multiplier_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    vector_multiplier_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    vector_multiplier_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    vector_multiplier_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    vector_multiplier_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    vector_multiplier_AXILiteS_s_axi_U->ACLK(ap_clk);
    vector_multiplier_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    vector_multiplier_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    vector_multiplier_AXILiteS_s_axi_U->constant_V(constant_V);
    regslice_both_in_data_data_V_U = new regslice_both<32>("regslice_both_in_data_data_V_U");
    regslice_both_in_data_data_V_U->ap_clk(ap_clk);
    regslice_both_in_data_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_data_V_U->data_in(in_data_TDATA);
    regslice_both_in_data_data_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_data_V_U->ack_in(regslice_both_in_data_data_V_U_ack_in);
    regslice_both_in_data_data_V_U->data_out(in_data_TDATA_int);
    regslice_both_in_data_data_V_U->vld_out(in_data_TVALID_int);
    regslice_both_in_data_data_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_data_V_U->apdone_blk(regslice_both_in_data_data_V_U_apdone_blk);
    regslice_both_in_data_keep_V_U = new regslice_both<4>("regslice_both_in_data_keep_V_U");
    regslice_both_in_data_keep_V_U->ap_clk(ap_clk);
    regslice_both_in_data_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_keep_V_U->data_in(in_data_TKEEP);
    regslice_both_in_data_keep_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_keep_V_U->ack_in(regslice_both_in_data_keep_V_U_ack_in);
    regslice_both_in_data_keep_V_U->data_out(in_data_TKEEP_int);
    regslice_both_in_data_keep_V_U->vld_out(regslice_both_in_data_keep_V_U_vld_out);
    regslice_both_in_data_keep_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_keep_V_U->apdone_blk(regslice_both_in_data_keep_V_U_apdone_blk);
    regslice_both_in_data_strb_V_U = new regslice_both<4>("regslice_both_in_data_strb_V_U");
    regslice_both_in_data_strb_V_U->ap_clk(ap_clk);
    regslice_both_in_data_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_strb_V_U->data_in(in_data_TSTRB);
    regslice_both_in_data_strb_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_strb_V_U->ack_in(regslice_both_in_data_strb_V_U_ack_in);
    regslice_both_in_data_strb_V_U->data_out(in_data_TSTRB_int);
    regslice_both_in_data_strb_V_U->vld_out(regslice_both_in_data_strb_V_U_vld_out);
    regslice_both_in_data_strb_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_strb_V_U->apdone_blk(regslice_both_in_data_strb_V_U_apdone_blk);
    regslice_both_in_data_user_V_U = new regslice_both<1>("regslice_both_in_data_user_V_U");
    regslice_both_in_data_user_V_U->ap_clk(ap_clk);
    regslice_both_in_data_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_user_V_U->data_in(in_data_TUSER);
    regslice_both_in_data_user_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_user_V_U->ack_in(regslice_both_in_data_user_V_U_ack_in);
    regslice_both_in_data_user_V_U->data_out(in_data_TUSER_int);
    regslice_both_in_data_user_V_U->vld_out(regslice_both_in_data_user_V_U_vld_out);
    regslice_both_in_data_user_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_user_V_U->apdone_blk(regslice_both_in_data_user_V_U_apdone_blk);
    regslice_both_in_data_last_V_U = new regslice_both<1>("regslice_both_in_data_last_V_U");
    regslice_both_in_data_last_V_U->ap_clk(ap_clk);
    regslice_both_in_data_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_last_V_U->data_in(in_data_TLAST);
    regslice_both_in_data_last_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_last_V_U->ack_in(regslice_both_in_data_last_V_U_ack_in);
    regslice_both_in_data_last_V_U->data_out(in_data_TLAST_int);
    regslice_both_in_data_last_V_U->vld_out(regslice_both_in_data_last_V_U_vld_out);
    regslice_both_in_data_last_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_last_V_U->apdone_blk(regslice_both_in_data_last_V_U_apdone_blk);
    regslice_both_in_data_id_V_U = new regslice_both<1>("regslice_both_in_data_id_V_U");
    regslice_both_in_data_id_V_U->ap_clk(ap_clk);
    regslice_both_in_data_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_id_V_U->data_in(in_data_TID);
    regslice_both_in_data_id_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_id_V_U->ack_in(regslice_both_in_data_id_V_U_ack_in);
    regslice_both_in_data_id_V_U->data_out(in_data_TID_int);
    regslice_both_in_data_id_V_U->vld_out(regslice_both_in_data_id_V_U_vld_out);
    regslice_both_in_data_id_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_id_V_U->apdone_blk(regslice_both_in_data_id_V_U_apdone_blk);
    regslice_both_in_data_dest_V_U = new regslice_both<1>("regslice_both_in_data_dest_V_U");
    regslice_both_in_data_dest_V_U->ap_clk(ap_clk);
    regslice_both_in_data_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_data_dest_V_U->data_in(in_data_TDEST);
    regslice_both_in_data_dest_V_U->vld_in(in_data_TVALID);
    regslice_both_in_data_dest_V_U->ack_in(regslice_both_in_data_dest_V_U_ack_in);
    regslice_both_in_data_dest_V_U->data_out(in_data_TDEST_int);
    regslice_both_in_data_dest_V_U->vld_out(regslice_both_in_data_dest_V_U_vld_out);
    regslice_both_in_data_dest_V_U->ack_out(in_data_TREADY_int);
    regslice_both_in_data_dest_V_U->apdone_blk(regslice_both_in_data_dest_V_U_apdone_blk);
    regslice_both_out_data_data_V_U = new regslice_both<32>("regslice_both_out_data_data_V_U");
    regslice_both_out_data_data_V_U->ap_clk(ap_clk);
    regslice_both_out_data_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_data_V_U->data_in(out_data_TDATA_int);
    regslice_both_out_data_data_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_data_V_U->ack_in(out_data_TREADY_int);
    regslice_both_out_data_data_V_U->data_out(out_data_TDATA);
    regslice_both_out_data_data_V_U->vld_out(regslice_both_out_data_data_V_U_vld_out);
    regslice_both_out_data_data_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_data_V_U->apdone_blk(regslice_both_out_data_data_V_U_apdone_blk);
    regslice_both_out_data_keep_V_U = new regslice_both<4>("regslice_both_out_data_keep_V_U");
    regslice_both_out_data_keep_V_U->ap_clk(ap_clk);
    regslice_both_out_data_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_keep_V_U->data_in(in_data_keep_V_tmp_reg_146);
    regslice_both_out_data_keep_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_keep_V_U->ack_in(regslice_both_out_data_keep_V_U_ack_in_dummy);
    regslice_both_out_data_keep_V_U->data_out(out_data_TKEEP);
    regslice_both_out_data_keep_V_U->vld_out(regslice_both_out_data_keep_V_U_vld_out);
    regslice_both_out_data_keep_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_keep_V_U->apdone_blk(regslice_both_out_data_keep_V_U_apdone_blk);
    regslice_both_out_data_strb_V_U = new regslice_both<4>("regslice_both_out_data_strb_V_U");
    regslice_both_out_data_strb_V_U->ap_clk(ap_clk);
    regslice_both_out_data_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_strb_V_U->data_in(in_data_strb_V_tmp_reg_151);
    regslice_both_out_data_strb_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_strb_V_U->ack_in(regslice_both_out_data_strb_V_U_ack_in_dummy);
    regslice_both_out_data_strb_V_U->data_out(out_data_TSTRB);
    regslice_both_out_data_strb_V_U->vld_out(regslice_both_out_data_strb_V_U_vld_out);
    regslice_both_out_data_strb_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_strb_V_U->apdone_blk(regslice_both_out_data_strb_V_U_apdone_blk);
    regslice_both_out_data_user_V_U = new regslice_both<1>("regslice_both_out_data_user_V_U");
    regslice_both_out_data_user_V_U->ap_clk(ap_clk);
    regslice_both_out_data_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_user_V_U->data_in(in_data_user_V_tmp_reg_156);
    regslice_both_out_data_user_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_user_V_U->ack_in(regslice_both_out_data_user_V_U_ack_in_dummy);
    regslice_both_out_data_user_V_U->data_out(out_data_TUSER);
    regslice_both_out_data_user_V_U->vld_out(regslice_both_out_data_user_V_U_vld_out);
    regslice_both_out_data_user_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_user_V_U->apdone_blk(regslice_both_out_data_user_V_U_apdone_blk);
    regslice_both_out_data_last_V_U = new regslice_both<1>("regslice_both_out_data_last_V_U");
    regslice_both_out_data_last_V_U->ap_clk(ap_clk);
    regslice_both_out_data_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_last_V_U->data_in(in_data_last_V_tmp_reg_161);
    regslice_both_out_data_last_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_last_V_U->ack_in(regslice_both_out_data_last_V_U_ack_in_dummy);
    regslice_both_out_data_last_V_U->data_out(out_data_TLAST);
    regslice_both_out_data_last_V_U->vld_out(regslice_both_out_data_last_V_U_vld_out);
    regslice_both_out_data_last_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_last_V_U->apdone_blk(regslice_both_out_data_last_V_U_apdone_blk);
    regslice_both_out_data_id_V_U = new regslice_both<1>("regslice_both_out_data_id_V_U");
    regslice_both_out_data_id_V_U->ap_clk(ap_clk);
    regslice_both_out_data_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_id_V_U->data_in(in_data_id_V_tmp_reg_166);
    regslice_both_out_data_id_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_id_V_U->ack_in(regslice_both_out_data_id_V_U_ack_in_dummy);
    regslice_both_out_data_id_V_U->data_out(out_data_TID);
    regslice_both_out_data_id_V_U->vld_out(regslice_both_out_data_id_V_U_vld_out);
    regslice_both_out_data_id_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_id_V_U->apdone_blk(regslice_both_out_data_id_V_U_apdone_blk);
    regslice_both_out_data_dest_V_U = new regslice_both<1>("regslice_both_out_data_dest_V_U");
    regslice_both_out_data_dest_V_U->ap_clk(ap_clk);
    regslice_both_out_data_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_data_dest_V_U->data_in(in_data_dest_V_tmp_reg_171);
    regslice_both_out_data_dest_V_U->vld_in(out_data_TVALID_int);
    regslice_both_out_data_dest_V_U->ack_in(regslice_both_out_data_dest_V_U_ack_in_dummy);
    regslice_both_out_data_dest_V_U->data_out(out_data_TDEST);
    regslice_both_out_data_dest_V_U->vld_out(regslice_both_out_data_dest_V_U_vld_out);
    regslice_both_out_data_dest_V_U->ack_out(out_data_TREADY);
    regslice_both_out_data_dest_V_U->apdone_blk(regslice_both_out_data_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_constant_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( regslice_both_out_data_data_V_U_apdone_blk );
    sensitive << ( out_data_TREADY_int );

    SC_METHOD(thread_in_data_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID_int );

    SC_METHOD(thread_in_data_TREADY);
    sensitive << ( in_data_TVALID );
    sensitive << ( regslice_both_in_data_data_V_U_ack_in );

    SC_METHOD(thread_in_data_TREADY_int);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_data_TVALID_int );

    SC_METHOD(thread_mul_ln214_fu_135_p1);
    sensitive << ( constant_V_0_data_reg );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_data_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( out_data_TREADY_int );

    SC_METHOD(thread_out_data_TDATA_int);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( in_data_data_V_tmp_reg_141 );
    sensitive << ( mul_ln214_fu_135_p1 );

    SC_METHOD(thread_out_data_TVALID);
    sensitive << ( regslice_both_out_data_data_V_U_vld_out );

    SC_METHOD(thread_out_data_TVALID_int);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( out_data_TREADY_int );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( regslice_both_out_data_data_V_U_apdone_blk );
    sensitive << ( in_data_TVALID_int );
    sensitive << ( out_data_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    constant_V_0_data_reg = "00000000000000000000000000000000";
    constant_V_0_vld_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "vector_multiplier_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_data_TDATA, "(port)in_data_TDATA");
    sc_trace(mVcdFile, in_data_TVALID, "(port)in_data_TVALID");
    sc_trace(mVcdFile, in_data_TREADY, "(port)in_data_TREADY");
    sc_trace(mVcdFile, in_data_TKEEP, "(port)in_data_TKEEP");
    sc_trace(mVcdFile, in_data_TSTRB, "(port)in_data_TSTRB");
    sc_trace(mVcdFile, in_data_TUSER, "(port)in_data_TUSER");
    sc_trace(mVcdFile, in_data_TLAST, "(port)in_data_TLAST");
    sc_trace(mVcdFile, in_data_TID, "(port)in_data_TID");
    sc_trace(mVcdFile, in_data_TDEST, "(port)in_data_TDEST");
    sc_trace(mVcdFile, out_data_TDATA, "(port)out_data_TDATA");
    sc_trace(mVcdFile, out_data_TVALID, "(port)out_data_TVALID");
    sc_trace(mVcdFile, out_data_TREADY, "(port)out_data_TREADY");
    sc_trace(mVcdFile, out_data_TKEEP, "(port)out_data_TKEEP");
    sc_trace(mVcdFile, out_data_TSTRB, "(port)out_data_TSTRB");
    sc_trace(mVcdFile, out_data_TUSER, "(port)out_data_TUSER");
    sc_trace(mVcdFile, out_data_TLAST, "(port)out_data_TLAST");
    sc_trace(mVcdFile, out_data_TID, "(port)out_data_TID");
    sc_trace(mVcdFile, out_data_TDEST, "(port)out_data_TDEST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, constant_V, "constant_V");
    sc_trace(mVcdFile, constant_V_0_data_reg, "constant_V_0_data_reg");
    sc_trace(mVcdFile, constant_V_0_vld_reg, "constant_V_0_vld_reg");
    sc_trace(mVcdFile, constant_V_0_ack_out, "constant_V_0_ack_out");
    sc_trace(mVcdFile, in_data_TDATA_blk_n, "in_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_data_TDATA_blk_n, "out_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, in_data_data_V_tmp_reg_141, "in_data_data_V_tmp_reg_141");
    sc_trace(mVcdFile, in_data_keep_V_tmp_reg_146, "in_data_keep_V_tmp_reg_146");
    sc_trace(mVcdFile, in_data_strb_V_tmp_reg_151, "in_data_strb_V_tmp_reg_151");
    sc_trace(mVcdFile, in_data_user_V_tmp_reg_156, "in_data_user_V_tmp_reg_156");
    sc_trace(mVcdFile, in_data_last_V_tmp_reg_161, "in_data_last_V_tmp_reg_161");
    sc_trace(mVcdFile, in_data_id_V_tmp_reg_166, "in_data_id_V_tmp_reg_166");
    sc_trace(mVcdFile, in_data_dest_V_tmp_reg_171, "in_data_dest_V_tmp_reg_171");
    sc_trace(mVcdFile, mul_ln214_fu_135_p1, "mul_ln214_fu_135_p1");
    sc_trace(mVcdFile, regslice_both_out_data_data_V_U_apdone_blk, "regslice_both_out_data_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_in_data_data_V_U_apdone_blk, "regslice_both_in_data_data_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TDATA_int, "in_data_TDATA_int");
    sc_trace(mVcdFile, in_data_TVALID_int, "in_data_TVALID_int");
    sc_trace(mVcdFile, in_data_TREADY_int, "in_data_TREADY_int");
    sc_trace(mVcdFile, regslice_both_in_data_data_V_U_ack_in, "regslice_both_in_data_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_data_keep_V_U_apdone_blk, "regslice_both_in_data_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TKEEP_int, "in_data_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_in_data_keep_V_U_vld_out, "regslice_both_in_data_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_data_keep_V_U_ack_in, "regslice_both_in_data_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_data_strb_V_U_apdone_blk, "regslice_both_in_data_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TSTRB_int, "in_data_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_in_data_strb_V_U_vld_out, "regslice_both_in_data_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_data_strb_V_U_ack_in, "regslice_both_in_data_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_data_user_V_U_apdone_blk, "regslice_both_in_data_user_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TUSER_int, "in_data_TUSER_int");
    sc_trace(mVcdFile, regslice_both_in_data_user_V_U_vld_out, "regslice_both_in_data_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_data_user_V_U_ack_in, "regslice_both_in_data_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_data_last_V_U_apdone_blk, "regslice_both_in_data_last_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TLAST_int, "in_data_TLAST_int");
    sc_trace(mVcdFile, regslice_both_in_data_last_V_U_vld_out, "regslice_both_in_data_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_data_last_V_U_ack_in, "regslice_both_in_data_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_data_id_V_U_apdone_blk, "regslice_both_in_data_id_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TID_int, "in_data_TID_int");
    sc_trace(mVcdFile, regslice_both_in_data_id_V_U_vld_out, "regslice_both_in_data_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_data_id_V_U_ack_in, "regslice_both_in_data_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_data_dest_V_U_apdone_blk, "regslice_both_in_data_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, in_data_TDEST_int, "in_data_TDEST_int");
    sc_trace(mVcdFile, regslice_both_in_data_dest_V_U_vld_out, "regslice_both_in_data_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_data_dest_V_U_ack_in, "regslice_both_in_data_dest_V_U_ack_in");
    sc_trace(mVcdFile, out_data_TDATA_int, "out_data_TDATA_int");
    sc_trace(mVcdFile, out_data_TVALID_int, "out_data_TVALID_int");
    sc_trace(mVcdFile, out_data_TREADY_int, "out_data_TREADY_int");
    sc_trace(mVcdFile, regslice_both_out_data_data_V_U_vld_out, "regslice_both_out_data_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_data_keep_V_U_apdone_blk, "regslice_both_out_data_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_data_keep_V_U_ack_in_dummy, "regslice_both_out_data_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_data_keep_V_U_vld_out, "regslice_both_out_data_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_data_strb_V_U_apdone_blk, "regslice_both_out_data_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_data_strb_V_U_ack_in_dummy, "regslice_both_out_data_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_data_strb_V_U_vld_out, "regslice_both_out_data_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_data_user_V_U_apdone_blk, "regslice_both_out_data_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_data_user_V_U_ack_in_dummy, "regslice_both_out_data_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_data_user_V_U_vld_out, "regslice_both_out_data_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_data_last_V_U_apdone_blk, "regslice_both_out_data_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_data_last_V_U_ack_in_dummy, "regslice_both_out_data_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_data_last_V_U_vld_out, "regslice_both_out_data_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_data_id_V_U_apdone_blk, "regslice_both_out_data_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_data_id_V_U_ack_in_dummy, "regslice_both_out_data_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_data_id_V_U_vld_out, "regslice_both_out_data_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_data_dest_V_U_apdone_blk, "regslice_both_out_data_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_data_dest_V_U_ack_in_dummy, "regslice_both_out_data_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_data_dest_V_U_vld_out, "regslice_both_out_data_dest_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("vector_multiplier.hdltvin.dat");
    mHdltvoutHandle.open("vector_multiplier.hdltvout.dat");
}

vector_multiplier::~vector_multiplier() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete vector_multiplier_AXILiteS_s_axi_U;
    delete regslice_both_in_data_data_V_U;
    delete regslice_both_in_data_keep_V_U;
    delete regslice_both_in_data_strb_V_U;
    delete regslice_both_in_data_user_V_U;
    delete regslice_both_in_data_last_V_U;
    delete regslice_both_in_data_id_V_U;
    delete regslice_both_in_data_dest_V_U;
    delete regslice_both_out_data_data_V_U;
    delete regslice_both_out_data_keep_V_U;
    delete regslice_both_out_data_strb_V_U;
    delete regslice_both_out_data_user_V_U;
    delete regslice_both_out_data_last_V_U;
    delete regslice_both_out_data_id_V_U;
    delete regslice_both_out_data_dest_V_U;
}

void vector_multiplier::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void vector_multiplier::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, constant_V_0_vld_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, constant_V_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, constant_V_0_ack_out.read())))) {
        constant_V_0_data_reg = constant_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(in_data_TVALID_int.read(), ap_const_logic_1))) {
        in_data_data_V_tmp_reg_141 = in_data_TDATA_int.read();
        in_data_dest_V_tmp_reg_171 = in_data_TDEST_int.read();
        in_data_id_V_tmp_reg_166 = in_data_TID_int.read();
        in_data_keep_V_tmp_reg_146 = in_data_TKEEP_int.read();
        in_data_last_V_tmp_reg_161 = in_data_TLAST_int.read();
        in_data_strb_V_tmp_reg_151 = in_data_TSTRB_int.read();
        in_data_user_V_tmp_reg_156 = in_data_TUSER_int.read();
    }
}

void vector_multiplier::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void vector_multiplier::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void vector_multiplier::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void vector_multiplier::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void vector_multiplier::thread_constant_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(out_data_TREADY_int.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_out_data_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_TREADY_int.read()))))) {
        constant_V_0_ack_out = ap_const_logic_1;
    } else {
        constant_V_0_ack_out = ap_const_logic_0;
    }
}

void vector_multiplier::thread_in_data_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_data_TDATA_blk_n = in_data_TVALID_int.read();
    } else {
        in_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void vector_multiplier::thread_in_data_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_in_data_data_V_U_ack_in.read()))) {
        in_data_TREADY = ap_const_logic_1;
    } else {
        in_data_TREADY = ap_const_logic_0;
    }
}

void vector_multiplier::thread_in_data_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(in_data_TVALID_int.read(), ap_const_logic_1))) {
        in_data_TREADY_int = ap_const_logic_1;
    } else {
        in_data_TREADY_int = ap_const_logic_0;
    }
}

void vector_multiplier::thread_mul_ln214_fu_135_p1() {
    mul_ln214_fu_135_p1 = constant_V_0_data_reg.read();
}

void vector_multiplier::thread_out_data_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        out_data_TDATA_blk_n = out_data_TREADY_int.read();
    } else {
        out_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void vector_multiplier::thread_out_data_TDATA_int() {
    out_data_TDATA_int = (!in_data_data_V_tmp_reg_141.read().is_01() || !mul_ln214_fu_135_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(in_data_data_V_tmp_reg_141.read()) * sc_bigint<32>(mul_ln214_fu_135_p1.read());
}

void vector_multiplier::thread_out_data_TVALID() {
    out_data_TVALID = regslice_both_out_data_data_V_U_vld_out.read();
}

void vector_multiplier::thread_out_data_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(out_data_TREADY_int.read(), ap_const_logic_1))) {
        out_data_TVALID_int = ap_const_logic_1;
    } else {
        out_data_TVALID_int = ap_const_logic_0;
    }
}

void vector_multiplier::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(in_data_TVALID_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(out_data_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_out_data_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void vector_multiplier::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TDATA\" :  \"" << in_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TVALID\" :  \"" << in_data_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_data_TREADY\" :  \"" << in_data_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TKEEP\" :  \"" << in_data_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TSTRB\" :  \"" << in_data_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TUSER\" :  \"" << in_data_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TLAST\" :  \"" << in_data_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TID\" :  \"" << in_data_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TDEST\" :  \"" << in_data_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TDATA\" :  \"" << out_data_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TVALID\" :  \"" << out_data_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_data_TREADY\" :  \"" << out_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TKEEP\" :  \"" << out_data_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TSTRB\" :  \"" << out_data_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TUSER\" :  \"" << out_data_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TLAST\" :  \"" << out_data_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TID\" :  \"" << out_data_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TDEST\" :  \"" << out_data_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

