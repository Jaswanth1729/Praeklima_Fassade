-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vector_multiplier is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of vector_multiplier is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vector_multiplier,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.880000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=147,HLS_SYN_LUT=163,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal constant_V : STD_LOGIC_VECTOR (31 downto 0);
    signal constant_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal constant_V_0_vld_reg : STD_LOGIC := '0';
    signal constant_V_0_ack_out : STD_LOGIC;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_data_data_V_tmp_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_keep_V_tmp_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_strb_V_tmp_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_user_V_tmp_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_last_V_tmp_reg_161 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_id_V_tmp_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_dest_V_tmp_reg_171 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln214_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_out_data_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_data_data_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_TVALID_int : STD_LOGIC;
    signal in_data_TREADY_int : STD_LOGIC;
    signal regslice_both_in_data_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_data_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_data_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_user_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_last_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_id_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_dest_V_U_ack_in : STD_LOGIC;
    signal out_data_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_TVALID_int : STD_LOGIC;
    signal out_data_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_dest_V_U_vld_out : STD_LOGIC;

    component vector_multiplier_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        constant_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    vector_multiplier_AXILiteS_s_axi_U : component vector_multiplier_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        constant_V => constant_V);

    regslice_both_in_data_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TDATA,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_data_V_U_ack_in,
        data_out => in_data_TDATA_int,
        vld_out => in_data_TVALID_int,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_data_V_U_apdone_blk);

    regslice_both_in_data_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TKEEP,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_keep_V_U_ack_in,
        data_out => in_data_TKEEP_int,
        vld_out => regslice_both_in_data_keep_V_U_vld_out,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_keep_V_U_apdone_blk);

    regslice_both_in_data_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TSTRB,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_strb_V_U_ack_in,
        data_out => in_data_TSTRB_int,
        vld_out => regslice_both_in_data_strb_V_U_vld_out,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_strb_V_U_apdone_blk);

    regslice_both_in_data_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TUSER,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_user_V_U_ack_in,
        data_out => in_data_TUSER_int,
        vld_out => regslice_both_in_data_user_V_U_vld_out,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_user_V_U_apdone_blk);

    regslice_both_in_data_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TLAST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_last_V_U_ack_in,
        data_out => in_data_TLAST_int,
        vld_out => regslice_both_in_data_last_V_U_vld_out,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_last_V_U_apdone_blk);

    regslice_both_in_data_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TID,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_id_V_U_ack_in,
        data_out => in_data_TID_int,
        vld_out => regslice_both_in_data_id_V_U_vld_out,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_id_V_U_apdone_blk);

    regslice_both_in_data_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TDEST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_dest_V_U_ack_in,
        data_out => in_data_TDEST_int,
        vld_out => regslice_both_in_data_dest_V_U_vld_out,
        ack_out => in_data_TREADY_int,
        apdone_blk => regslice_both_in_data_dest_V_U_apdone_blk);

    regslice_both_out_data_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_data_TDATA_int,
        vld_in => out_data_TVALID_int,
        ack_in => out_data_TREADY_int,
        data_out => out_data_TDATA,
        vld_out => regslice_both_out_data_data_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_data_V_U_apdone_blk);

    regslice_both_out_data_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_keep_V_tmp_reg_146,
        vld_in => out_data_TVALID_int,
        ack_in => regslice_both_out_data_keep_V_U_ack_in_dummy,
        data_out => out_data_TKEEP,
        vld_out => regslice_both_out_data_keep_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_keep_V_U_apdone_blk);

    regslice_both_out_data_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_strb_V_tmp_reg_151,
        vld_in => out_data_TVALID_int,
        ack_in => regslice_both_out_data_strb_V_U_ack_in_dummy,
        data_out => out_data_TSTRB,
        vld_out => regslice_both_out_data_strb_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_strb_V_U_apdone_blk);

    regslice_both_out_data_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_user_V_tmp_reg_156,
        vld_in => out_data_TVALID_int,
        ack_in => regslice_both_out_data_user_V_U_ack_in_dummy,
        data_out => out_data_TUSER,
        vld_out => regslice_both_out_data_user_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_user_V_U_apdone_blk);

    regslice_both_out_data_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_last_V_tmp_reg_161,
        vld_in => out_data_TVALID_int,
        ack_in => regslice_both_out_data_last_V_U_ack_in_dummy,
        data_out => out_data_TLAST,
        vld_out => regslice_both_out_data_last_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_last_V_U_apdone_blk);

    regslice_both_out_data_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_id_V_tmp_reg_166,
        vld_in => out_data_TVALID_int,
        ack_in => regslice_both_out_data_id_V_U_ack_in_dummy,
        data_out => out_data_TID,
        vld_out => regslice_both_out_data_id_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_id_V_U_apdone_blk);

    regslice_both_out_data_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_dest_V_tmp_reg_171,
        vld_in => out_data_TVALID_int,
        ack_in => regslice_both_out_data_dest_V_U_ack_in_dummy,
        data_out => out_data_TDEST,
        vld_out => regslice_both_out_data_dest_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    constant_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((constant_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((constant_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (constant_V_0_vld_reg = ap_const_logic_1)))) then
                constant_V_0_data_reg <= constant_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_data_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in_data_data_V_tmp_reg_141 <= in_data_TDATA_int;
                in_data_dest_V_tmp_reg_171 <= in_data_TDEST_int;
                in_data_id_V_tmp_reg_166 <= in_data_TID_int;
                in_data_keep_V_tmp_reg_146 <= in_data_TKEEP_int;
                in_data_last_V_tmp_reg_161 <= in_data_TLAST_int;
                in_data_strb_V_tmp_reg_151 <= in_data_TSTRB_int;
                in_data_user_V_tmp_reg_156 <= in_data_TUSER_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, regslice_both_out_data_data_V_U_apdone_blk, in_data_TVALID_int, out_data_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((in_data_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((out_data_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((out_data_TREADY_int = ap_const_logic_0) or (regslice_both_out_data_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    constant_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, regslice_both_out_data_data_V_U_apdone_blk, out_data_TREADY_int)
    begin
        if (((not(((out_data_TREADY_int = ap_const_logic_0) or (regslice_both_out_data_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((out_data_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            constant_V_0_ack_out <= ap_const_logic_1;
        else 
            constant_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in_data_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_data_TDATA_blk_n <= in_data_TVALID_int;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_data_TREADY_assign_proc : process(in_data_TVALID, regslice_both_in_data_data_V_U_ack_in)
    begin
        if (((regslice_both_in_data_data_V_U_ack_in = ap_const_logic_1) and (in_data_TVALID = ap_const_logic_1))) then 
            in_data_TREADY <= ap_const_logic_1;
        else 
            in_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_data_TREADY_int_assign_proc : process(ap_CS_fsm_state1, in_data_TVALID_int)
    begin
        if (((in_data_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_data_TREADY_int <= ap_const_logic_1;
        else 
            in_data_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln214_fu_135_p1 <= constant_V_0_data_reg;

    out_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, out_data_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_data_TDATA_blk_n <= out_data_TREADY_int;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_data_data_V_tmp_reg_141) * signed(mul_ln214_fu_135_p1))), 32));
    out_data_TVALID <= regslice_both_out_data_data_V_U_vld_out;

    out_data_TVALID_int_assign_proc : process(ap_CS_fsm_state2, out_data_TREADY_int)
    begin
        if (((out_data_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_data_TVALID_int <= ap_const_logic_1;
        else 
            out_data_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
