// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vector_multiplier,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.880000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=147,HLS_SYN_LUT=163,HLS_VERSION=2019_2}" *)

module vector_multiplier (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TUSER,
        in_data_TLAST,
        in_data_TID,
        in_data_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [3:0] in_data_TKEEP;
input  [3:0] in_data_TSTRB;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
input  [0:0] in_data_TID;
input  [0:0] in_data_TDEST;
output  [31:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [3:0] out_data_TKEEP;
output  [3:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg in_data_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] constant_V;
reg   [31:0] constant_V_0_data_reg;
reg    constant_V_0_vld_reg;
reg    constant_V_0_ack_out;
reg    in_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_data_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg  signed [31:0] in_data_data_V_tmp_reg_141;
reg   [3:0] in_data_keep_V_tmp_reg_146;
reg   [3:0] in_data_strb_V_tmp_reg_151;
reg   [0:0] in_data_user_V_tmp_reg_156;
reg   [0:0] in_data_last_V_tmp_reg_161;
reg   [0:0] in_data_id_V_tmp_reg_166;
reg   [0:0] in_data_dest_V_tmp_reg_171;
wire  signed [31:0] mul_ln214_fu_135_p1;
wire    regslice_both_out_data_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
wire    regslice_both_in_data_data_V_U_apdone_blk;
wire   [31:0] in_data_TDATA_int;
wire    in_data_TVALID_int;
reg    in_data_TREADY_int;
wire    regslice_both_in_data_data_V_U_ack_in;
wire    regslice_both_in_data_keep_V_U_apdone_blk;
wire   [3:0] in_data_TKEEP_int;
wire    regslice_both_in_data_keep_V_U_vld_out;
wire    regslice_both_in_data_keep_V_U_ack_in;
wire    regslice_both_in_data_strb_V_U_apdone_blk;
wire   [3:0] in_data_TSTRB_int;
wire    regslice_both_in_data_strb_V_U_vld_out;
wire    regslice_both_in_data_strb_V_U_ack_in;
wire    regslice_both_in_data_user_V_U_apdone_blk;
wire   [0:0] in_data_TUSER_int;
wire    regslice_both_in_data_user_V_U_vld_out;
wire    regslice_both_in_data_user_V_U_ack_in;
wire    regslice_both_in_data_last_V_U_apdone_blk;
wire   [0:0] in_data_TLAST_int;
wire    regslice_both_in_data_last_V_U_vld_out;
wire    regslice_both_in_data_last_V_U_ack_in;
wire    regslice_both_in_data_id_V_U_apdone_blk;
wire   [0:0] in_data_TID_int;
wire    regslice_both_in_data_id_V_U_vld_out;
wire    regslice_both_in_data_id_V_U_ack_in;
wire    regslice_both_in_data_dest_V_U_apdone_blk;
wire   [0:0] in_data_TDEST_int;
wire    regslice_both_in_data_dest_V_U_vld_out;
wire    regslice_both_in_data_dest_V_U_ack_in;
wire   [31:0] out_data_TDATA_int;
reg    out_data_TVALID_int;
wire    out_data_TREADY_int;
wire    regslice_both_out_data_data_V_U_vld_out;
wire    regslice_both_out_data_keep_V_U_apdone_blk;
wire    regslice_both_out_data_keep_V_U_ack_in_dummy;
wire    regslice_both_out_data_keep_V_U_vld_out;
wire    regslice_both_out_data_strb_V_U_apdone_blk;
wire    regslice_both_out_data_strb_V_U_ack_in_dummy;
wire    regslice_both_out_data_strb_V_U_vld_out;
wire    regslice_both_out_data_user_V_U_apdone_blk;
wire    regslice_both_out_data_user_V_U_ack_in_dummy;
wire    regslice_both_out_data_user_V_U_vld_out;
wire    regslice_both_out_data_last_V_U_apdone_blk;
wire    regslice_both_out_data_last_V_U_ack_in_dummy;
wire    regslice_both_out_data_last_V_U_vld_out;
wire    regslice_both_out_data_id_V_U_apdone_blk;
wire    regslice_both_out_data_id_V_U_ack_in_dummy;
wire    regslice_both_out_data_id_V_U_vld_out;
wire    regslice_both_out_data_dest_V_U_apdone_blk;
wire    regslice_both_out_data_dest_V_U_ack_in_dummy;
wire    regslice_both_out_data_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 constant_V_0_data_reg = 32'd0;
#0 constant_V_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

vector_multiplier_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
vector_multiplier_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .constant_V(constant_V)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TDATA),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_data_V_U_ack_in),
    .data_out(in_data_TDATA_int),
    .vld_out(in_data_TVALID_int),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_data_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TKEEP),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_keep_V_U_ack_in),
    .data_out(in_data_TKEEP_int),
    .vld_out(regslice_both_in_data_keep_V_U_vld_out),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_data_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TSTRB),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_strb_V_U_ack_in),
    .data_out(in_data_TSTRB_int),
    .vld_out(regslice_both_in_data_strb_V_U_vld_out),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TUSER),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_user_V_U_ack_in),
    .data_out(in_data_TUSER_int),
    .vld_out(regslice_both_in_data_user_V_U_vld_out),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TLAST),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_last_V_U_ack_in),
    .data_out(in_data_TLAST_int),
    .vld_out(regslice_both_in_data_last_V_U_vld_out),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TID),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_id_V_U_ack_in),
    .data_out(in_data_TID_int),
    .vld_out(regslice_both_in_data_id_V_U_vld_out),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TDEST),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_dest_V_U_ack_in),
    .data_out(in_data_TDEST_int),
    .vld_out(regslice_both_in_data_dest_V_U_vld_out),
    .ack_out(in_data_TREADY_int),
    .apdone_blk(regslice_both_in_data_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_data_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_data_TDATA_int),
    .vld_in(out_data_TVALID_int),
    .ack_in(out_data_TREADY_int),
    .data_out(out_data_TDATA),
    .vld_out(regslice_both_out_data_data_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_data_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_keep_V_tmp_reg_146),
    .vld_in(out_data_TVALID_int),
    .ack_in(regslice_both_out_data_keep_V_U_ack_in_dummy),
    .data_out(out_data_TKEEP),
    .vld_out(regslice_both_out_data_keep_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_data_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_strb_V_tmp_reg_151),
    .vld_in(out_data_TVALID_int),
    .ack_in(regslice_both_out_data_strb_V_U_ack_in_dummy),
    .data_out(out_data_TSTRB),
    .vld_out(regslice_both_out_data_strb_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_user_V_tmp_reg_156),
    .vld_in(out_data_TVALID_int),
    .ack_in(regslice_both_out_data_user_V_U_ack_in_dummy),
    .data_out(out_data_TUSER),
    .vld_out(regslice_both_out_data_user_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_last_V_tmp_reg_161),
    .vld_in(out_data_TVALID_int),
    .ack_in(regslice_both_out_data_last_V_U_ack_in_dummy),
    .data_out(out_data_TLAST),
    .vld_out(regslice_both_out_data_last_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_id_V_tmp_reg_166),
    .vld_in(out_data_TVALID_int),
    .ack_in(regslice_both_out_data_id_V_U_ack_in_dummy),
    .data_out(out_data_TID),
    .vld_out(regslice_both_out_data_id_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_dest_V_tmp_reg_171),
    .vld_in(out_data_TVALID_int),
    .ack_in(regslice_both_out_data_dest_V_U_ack_in_dummy),
    .data_out(out_data_TDEST),
    .vld_out(regslice_both_out_data_dest_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((constant_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((constant_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (constant_V_0_vld_reg == 1'b1)))) begin
        constant_V_0_data_reg <= constant_V;
    end
end

always @ (posedge ap_clk) begin
    if (((in_data_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_data_data_V_tmp_reg_141 <= in_data_TDATA_int;
        in_data_dest_V_tmp_reg_171 <= in_data_TDEST_int;
        in_data_id_V_tmp_reg_166 <= in_data_TID_int;
        in_data_keep_V_tmp_reg_146 <= in_data_TKEEP_int;
        in_data_last_V_tmp_reg_161 <= in_data_TLAST_int;
        in_data_strb_V_tmp_reg_151 <= in_data_TSTRB_int;
        in_data_user_V_tmp_reg_156 <= in_data_TUSER_int;
    end
end

always @ (*) begin
    if (((~((out_data_TREADY_int == 1'b0) | (regslice_both_out_data_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3)) | ((out_data_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        constant_V_0_ack_out = 1'b1;
    end else begin
        constant_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_data_TDATA_blk_n = in_data_TVALID_int;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_data_data_V_U_ack_in == 1'b1) & (in_data_TVALID == 1'b1))) begin
        in_data_TREADY = 1'b1;
    end else begin
        in_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((in_data_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_data_TREADY_int = 1'b1;
    end else begin
        in_data_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_data_TDATA_blk_n = out_data_TREADY_int;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_data_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_data_TVALID_int = 1'b1;
    end else begin
        out_data_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((in_data_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((out_data_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_data_TREADY_int == 1'b0) | (regslice_both_out_data_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign mul_ln214_fu_135_p1 = constant_V_0_data_reg;

assign out_data_TDATA_int = ($signed(in_data_data_V_tmp_reg_141) * $signed(mul_ln214_fu_135_p1));

assign out_data_TVALID = regslice_both_out_data_data_V_U_vld_out;

endmodule //vector_multiplier
