// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "image_inverter1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic image_inverter1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic image_inverter1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> image_inverter1::ap_ST_fsm_pp0_stage0 = "1";
const bool image_inverter1::ap_const_boolean_1 = true;
const sc_lv<32> image_inverter1::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool image_inverter1::ap_const_boolean_0 = false;
const sc_lv<8> image_inverter1::ap_const_lv8_FF = "11111111";

image_inverter1::image_inverter1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_inStream_V_data_V_U = new regslice_both<8>("regslice_both_inStream_V_data_V_U");
    regslice_both_inStream_V_data_V_U->ap_clk(ap_clk);
    regslice_both_inStream_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_inStream_V_data_V_U->data_in(inStream_TDATA);
    regslice_both_inStream_V_data_V_U->vld_in(inStream_TVALID);
    regslice_both_inStream_V_data_V_U->ack_in(regslice_both_inStream_V_data_V_U_ack_in);
    regslice_both_inStream_V_data_V_U->data_out(inStream_TDATA_int);
    regslice_both_inStream_V_data_V_U->vld_out(inStream_TVALID_int);
    regslice_both_inStream_V_data_V_U->ack_out(inStream_TREADY_int);
    regslice_both_inStream_V_data_V_U->apdone_blk(regslice_both_inStream_V_data_V_U_apdone_blk);
    regslice_both_inStream_V_keep_V_U = new regslice_both<1>("regslice_both_inStream_V_keep_V_U");
    regslice_both_inStream_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_inStream_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_inStream_V_keep_V_U->data_in(inStream_TKEEP);
    regslice_both_inStream_V_keep_V_U->vld_in(inStream_TVALID);
    regslice_both_inStream_V_keep_V_U->ack_in(regslice_both_inStream_V_keep_V_U_ack_in);
    regslice_both_inStream_V_keep_V_U->data_out(inStream_TKEEP_int);
    regslice_both_inStream_V_keep_V_U->vld_out(regslice_both_inStream_V_keep_V_U_vld_out);
    regslice_both_inStream_V_keep_V_U->ack_out(inStream_TREADY_int);
    regslice_both_inStream_V_keep_V_U->apdone_blk(regslice_both_inStream_V_keep_V_U_apdone_blk);
    regslice_both_inStream_V_strb_V_U = new regslice_both<1>("regslice_both_inStream_V_strb_V_U");
    regslice_both_inStream_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_inStream_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_inStream_V_strb_V_U->data_in(inStream_TSTRB);
    regslice_both_inStream_V_strb_V_U->vld_in(inStream_TVALID);
    regslice_both_inStream_V_strb_V_U->ack_in(regslice_both_inStream_V_strb_V_U_ack_in);
    regslice_both_inStream_V_strb_V_U->data_out(inStream_TSTRB_int);
    regslice_both_inStream_V_strb_V_U->vld_out(regslice_both_inStream_V_strb_V_U_vld_out);
    regslice_both_inStream_V_strb_V_U->ack_out(inStream_TREADY_int);
    regslice_both_inStream_V_strb_V_U->apdone_blk(regslice_both_inStream_V_strb_V_U_apdone_blk);
    regslice_both_inStream_V_last_V_U = new regslice_both<1>("regslice_both_inStream_V_last_V_U");
    regslice_both_inStream_V_last_V_U->ap_clk(ap_clk);
    regslice_both_inStream_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_inStream_V_last_V_U->data_in(inStream_TLAST);
    regslice_both_inStream_V_last_V_U->vld_in(inStream_TVALID);
    regslice_both_inStream_V_last_V_U->ack_in(regslice_both_inStream_V_last_V_U_ack_in);
    regslice_both_inStream_V_last_V_U->data_out(inStream_TLAST_int);
    regslice_both_inStream_V_last_V_U->vld_out(regslice_both_inStream_V_last_V_U_vld_out);
    regslice_both_inStream_V_last_V_U->ack_out(inStream_TREADY_int);
    regslice_both_inStream_V_last_V_U->apdone_blk(regslice_both_inStream_V_last_V_U_apdone_blk);
    regslice_both_outStream_V_data_V_U = new regslice_both<8>("regslice_both_outStream_V_data_V_U");
    regslice_both_outStream_V_data_V_U->ap_clk(ap_clk);
    regslice_both_outStream_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_outStream_V_data_V_U->data_in(outStream_TDATA_int);
    regslice_both_outStream_V_data_V_U->vld_in(outStream_TVALID_int);
    regslice_both_outStream_V_data_V_U->ack_in(outStream_TREADY_int);
    regslice_both_outStream_V_data_V_U->data_out(outStream_TDATA);
    regslice_both_outStream_V_data_V_U->vld_out(regslice_both_outStream_V_data_V_U_vld_out);
    regslice_both_outStream_V_data_V_U->ack_out(outStream_TREADY);
    regslice_both_outStream_V_data_V_U->apdone_blk(regslice_both_outStream_V_data_V_U_apdone_blk);
    regslice_both_outStream_V_keep_V_U = new regslice_both<1>("regslice_both_outStream_V_keep_V_U");
    regslice_both_outStream_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_outStream_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_outStream_V_keep_V_U->data_in(inStream_TKEEP_int);
    regslice_both_outStream_V_keep_V_U->vld_in(outStream_TVALID_int);
    regslice_both_outStream_V_keep_V_U->ack_in(regslice_both_outStream_V_keep_V_U_ack_in_dummy);
    regslice_both_outStream_V_keep_V_U->data_out(outStream_TKEEP);
    regslice_both_outStream_V_keep_V_U->vld_out(regslice_both_outStream_V_keep_V_U_vld_out);
    regslice_both_outStream_V_keep_V_U->ack_out(outStream_TREADY);
    regslice_both_outStream_V_keep_V_U->apdone_blk(regslice_both_outStream_V_keep_V_U_apdone_blk);
    regslice_both_outStream_V_strb_V_U = new regslice_both<1>("regslice_both_outStream_V_strb_V_U");
    regslice_both_outStream_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_outStream_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_outStream_V_strb_V_U->data_in(inStream_TSTRB_int);
    regslice_both_outStream_V_strb_V_U->vld_in(outStream_TVALID_int);
    regslice_both_outStream_V_strb_V_U->ack_in(regslice_both_outStream_V_strb_V_U_ack_in_dummy);
    regslice_both_outStream_V_strb_V_U->data_out(outStream_TSTRB);
    regslice_both_outStream_V_strb_V_U->vld_out(regslice_both_outStream_V_strb_V_U_vld_out);
    regslice_both_outStream_V_strb_V_U->ack_out(outStream_TREADY);
    regslice_both_outStream_V_strb_V_U->apdone_blk(regslice_both_outStream_V_strb_V_U_apdone_blk);
    regslice_both_outStream_V_last_V_U = new regslice_both<1>("regslice_both_outStream_V_last_V_U");
    regslice_both_outStream_V_last_V_U->ap_clk(ap_clk);
    regslice_both_outStream_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_outStream_V_last_V_U->data_in(inStream_TLAST_int);
    regslice_both_outStream_V_last_V_U->vld_in(outStream_TVALID_int);
    regslice_both_outStream_V_last_V_U->ack_in(regslice_both_outStream_V_last_V_U_ack_in_dummy);
    regslice_both_outStream_V_last_V_U->data_out(outStream_TLAST);
    regslice_both_outStream_V_last_V_U->vld_out(regslice_both_outStream_V_last_V_U_vld_out);
    regslice_both_outStream_V_last_V_U->ack_out(outStream_TREADY);
    regslice_both_outStream_V_last_V_U->apdone_blk(regslice_both_outStream_V_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( regslice_both_outStream_V_data_V_U_apdone_blk );
    sensitive << ( inStream_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( regslice_both_outStream_V_data_V_U_apdone_blk );
    sensitive << ( inStream_TVALID_int );
    sensitive << ( outStream_TREADY_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( regslice_both_outStream_V_data_V_U_apdone_blk );
    sensitive << ( inStream_TVALID_int );
    sensitive << ( outStream_TREADY_int );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( inStream_TVALID_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( regslice_both_outStream_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( inStream_TVALID_int );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( inStream_TVALID );
    sensitive << ( regslice_both_inStream_V_data_V_U_ack_in );

    SC_METHOD(thread_inStream_TREADY_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( outStream_TREADY_int );

    SC_METHOD(thread_outStream_TDATA_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( inStream_TDATA_int );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( regslice_both_outStream_V_data_V_U_vld_out );

    SC_METHOD(thread_outStream_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "image_inverter1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, regslice_both_outStream_V_data_V_U_apdone_blk, "regslice_both_outStream_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_inStream_V_data_V_U_apdone_blk, "regslice_both_inStream_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, inStream_TDATA_int, "inStream_TDATA_int");
    sc_trace(mVcdFile, inStream_TVALID_int, "inStream_TVALID_int");
    sc_trace(mVcdFile, inStream_TREADY_int, "inStream_TREADY_int");
    sc_trace(mVcdFile, regslice_both_inStream_V_data_V_U_ack_in, "regslice_both_inStream_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_inStream_V_keep_V_U_apdone_blk, "regslice_both_inStream_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, inStream_TKEEP_int, "inStream_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_inStream_V_keep_V_U_vld_out, "regslice_both_inStream_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_inStream_V_keep_V_U_ack_in, "regslice_both_inStream_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_inStream_V_strb_V_U_apdone_blk, "regslice_both_inStream_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, inStream_TSTRB_int, "inStream_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_inStream_V_strb_V_U_vld_out, "regslice_both_inStream_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_inStream_V_strb_V_U_ack_in, "regslice_both_inStream_V_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_inStream_V_last_V_U_apdone_blk, "regslice_both_inStream_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, inStream_TLAST_int, "inStream_TLAST_int");
    sc_trace(mVcdFile, regslice_both_inStream_V_last_V_U_vld_out, "regslice_both_inStream_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_inStream_V_last_V_U_ack_in, "regslice_both_inStream_V_last_V_U_ack_in");
    sc_trace(mVcdFile, outStream_TDATA_int, "outStream_TDATA_int");
    sc_trace(mVcdFile, outStream_TVALID_int, "outStream_TVALID_int");
    sc_trace(mVcdFile, outStream_TREADY_int, "outStream_TREADY_int");
    sc_trace(mVcdFile, regslice_both_outStream_V_data_V_U_vld_out, "regslice_both_outStream_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_outStream_V_keep_V_U_apdone_blk, "regslice_both_outStream_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_outStream_V_keep_V_U_ack_in_dummy, "regslice_both_outStream_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_outStream_V_keep_V_U_vld_out, "regslice_both_outStream_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_outStream_V_strb_V_U_apdone_blk, "regslice_both_outStream_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_outStream_V_strb_V_U_ack_in_dummy, "regslice_both_outStream_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_outStream_V_strb_V_U_vld_out, "regslice_both_outStream_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_outStream_V_last_V_U_apdone_blk, "regslice_both_outStream_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_outStream_V_last_V_U_ack_in_dummy, "regslice_both_outStream_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_outStream_V_last_V_U_vld_out, "regslice_both_outStream_V_last_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("image_inverter1.hdltvin.dat");
    mHdltvoutHandle.open("image_inverter1.hdltvout.dat");
}

image_inverter1::~image_inverter1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete regslice_both_inStream_V_data_V_U;
    delete regslice_both_inStream_V_keep_V_U;
    delete regslice_both_inStream_V_strb_V_U;
    delete regslice_both_inStream_V_last_V_U;
    delete regslice_both_outStream_V_data_V_U;
    delete regslice_both_outStream_V_keep_V_U;
    delete regslice_both_outStream_V_strb_V_U;
    delete regslice_both_outStream_V_last_V_U;
}

void image_inverter1::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
}

void image_inverter1::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void image_inverter1::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void image_inverter1::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_outStream_V_data_V_U_apdone_blk.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inStream_TVALID_int.read())));
}

void image_inverter1::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_outStream_V_data_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY_int.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, inStream_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY_int.read()))));
}

void image_inverter1::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_outStream_V_data_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY_int.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, inStream_TVALID_int.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY_int.read()))));
}

void image_inverter1::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, inStream_TVALID_int.read());
}

void image_inverter1::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_outStream_V_data_V_U_apdone_blk.read());
}

void image_inverter1::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void image_inverter1::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void image_inverter1::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void image_inverter1::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void image_inverter1::thread_inStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        inStream_TDATA_blk_n = inStream_TVALID_int.read();
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void image_inverter1::thread_inStream_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_inStream_V_data_V_U_ack_in.read()))) {
        inStream_TREADY = ap_const_logic_1;
    } else {
        inStream_TREADY = ap_const_logic_0;
    }
}

void image_inverter1::thread_inStream_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inStream_TREADY_int = ap_const_logic_1;
    } else {
        inStream_TREADY_int = ap_const_logic_0;
    }
}

void image_inverter1::thread_outStream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        outStream_TDATA_blk_n = outStream_TREADY_int.read();
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void image_inverter1::thread_outStream_TDATA_int() {
    outStream_TDATA_int = (inStream_TDATA_int.read() ^ ap_const_lv8_FF);
}

void image_inverter1::thread_outStream_TVALID() {
    outStream_TVALID = regslice_both_outStream_V_data_V_U_vld_out.read();
}

void image_inverter1::thread_outStream_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_TVALID_int = ap_const_logic_1;
    } else {
        outStream_TVALID_int = ap_const_logic_0;
    }
}

void image_inverter1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void image_inverter1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

