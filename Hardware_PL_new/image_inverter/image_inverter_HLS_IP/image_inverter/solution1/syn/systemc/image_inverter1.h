// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _image_inverter1_HH_
#define _image_inverter1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct image_inverter1 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<8> > inStream_TDATA;
    sc_in< sc_logic > inStream_TVALID;
    sc_out< sc_logic > inStream_TREADY;
    sc_in< sc_lv<1> > inStream_TKEEP;
    sc_in< sc_lv<1> > inStream_TSTRB;
    sc_in< sc_lv<1> > inStream_TLAST;
    sc_out< sc_lv<8> > outStream_TDATA;
    sc_out< sc_logic > outStream_TVALID;
    sc_in< sc_logic > outStream_TREADY;
    sc_out< sc_lv<1> > outStream_TKEEP;
    sc_out< sc_lv<1> > outStream_TSTRB;
    sc_out< sc_lv<1> > outStream_TLAST;


    // Module declarations
    image_inverter1(sc_module_name name);
    SC_HAS_PROCESS(image_inverter1);

    ~image_inverter1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    regslice_both<8>* regslice_both_inStream_V_data_V_U;
    regslice_both<1>* regslice_both_inStream_V_keep_V_U;
    regslice_both<1>* regslice_both_inStream_V_strb_V_U;
    regslice_both<1>* regslice_both_inStream_V_last_V_U;
    regslice_both<8>* regslice_both_outStream_V_data_V_U;
    regslice_both<1>* regslice_both_outStream_V_keep_V_U;
    regslice_both<1>* regslice_both_outStream_V_strb_V_U;
    regslice_both<1>* regslice_both_outStream_V_last_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > inStream_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > outStream_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > regslice_both_outStream_V_data_V_U_apdone_blk;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_inStream_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<8> > inStream_TDATA_int;
    sc_signal< sc_logic > inStream_TVALID_int;
    sc_signal< sc_logic > inStream_TREADY_int;
    sc_signal< sc_logic > regslice_both_inStream_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_inStream_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<1> > inStream_TKEEP_int;
    sc_signal< sc_logic > regslice_both_inStream_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_inStream_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_inStream_V_strb_V_U_apdone_blk;
    sc_signal< sc_lv<1> > inStream_TSTRB_int;
    sc_signal< sc_logic > regslice_both_inStream_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_inStream_V_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_inStream_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > inStream_TLAST_int;
    sc_signal< sc_logic > regslice_both_inStream_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_inStream_V_last_V_U_ack_in;
    sc_signal< sc_lv<8> > outStream_TDATA_int;
    sc_signal< sc_logic > outStream_TVALID_int;
    sc_signal< sc_logic > outStream_TREADY_int;
    sc_signal< sc_logic > regslice_both_outStream_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_outStream_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_outStream_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_outStream_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_outStream_V_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_outStream_V_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_outStream_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_outStream_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_outStream_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_outStream_V_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<8> ap_const_lv8_FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_inStream_TDATA_blk_n();
    void thread_inStream_TREADY();
    void thread_inStream_TREADY_int();
    void thread_outStream_TDATA_blk_n();
    void thread_outStream_TDATA_int();
    void thread_outStream_TVALID();
    void thread_outStream_TVALID_int();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
